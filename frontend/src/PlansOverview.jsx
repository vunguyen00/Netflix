// src/PlansOverview.jsx
import React, { useState } from 'react';
import './PlansOverview.css';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { priceMapValue } from './priceMap';
import {
  ChatBubbleLeftEllipsisIcon,
  ShoppingCartIcon,
  ShieldCheckIcon,
  StarIcon,
  ArrowsPointingOutIcon,
} from '@heroicons/react/24/outline';

const API_BASE = "https://api.dailywithminh.com/api";

export default function PlansOverview() {
  const plans = ['G√≥i ti·∫øt ki·ªám', 'G√≥i cao c·∫•p'];
  const durations = ['01 th√°ng', '03 th√°ng', '06 th√°ng', '12 th√°ng'];
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [selectedDuration, setSelectedDuration] = useState(durations[0]);
  const navigate = useNavigate();

  const planDescriptions = {
    'G√≥i ti·∫øt ki·ªám':
      '‚úî B·∫£o h√†nh t·ª± ƒë·ªông 24/7 ‚Äì ƒë·ªïi t√†i kho·∫£n ch·ªâ trong v√†i gi√¢y khi g·∫∑p s·ª± c·ªë.  \n‚úî CSKH tr·ª±c tuy·∫øn 24/7 ‚Äì h·ªó tr·ª£ nhanh ch√≥ng, nh·∫Øc nh·ªü gia h·∫°n k·ªãp th·ªùi.  \nüëâ Cam k·∫øt mang ƒë·∫øn cho anh/ch·ªã tr·∫£i nghi·ªám xem phim li·ªÅn m·∫°ch, kh√¥ng gi√°n ƒëo·∫°n!  ',
    'G√≥i cao c·∫•p':
      '‚úî T√†i kho·∫£n c√≥ 5 h·ªì s∆°, anh/ch·ªã s·∫Ω s·ª≠ d·ª•ng 1 h·ªì s∆° ri√™ng v·ªõi m√£ PIN b·∫£o m·∫≠t.  \n‚úî C√≥ ƒë∆∞·ªùng d·∫´n x√°c minh h·ªô gia ƒë√¨nh t·ª± v√† c√≥ CSKH tr·ª±c tuy·∫øn 24/7 h·ªó tr·ª£ nhanh ch√≥ng  \nüëâ ƒê·∫£m b·∫£o tr·∫£i nghi·ªám c√° nh√¢n h√≥a, ti·ªán l·ª£i v√† an to√†n tuy·ªát ƒë·ªëi! ',
  };

  const priceMapDisplay = {
    'G√≥i ti·∫øt ki·ªám': {
      '01 th√°ng': '50.000‚Ç´',
      '03 th√°ng': '140.000‚Ç´',
      '06 th√°ng': '270.000‚Ç´',
      '12 th√°ng': '500.000‚Ç´',
    },
    'G√≥i cao c·∫•p': {
      '01 th√°ng': '90.000‚Ç´',
      '03 th√°ng': '260.000‚Ç´',
      '06 th√°ng': '515.000‚Ç´',
      '12 th√°ng': '1.000.000‚Ç´',
    },
  };

  const handlePlanChange = (plan) => {
    setSelectedPlan(plan);
    setSelectedDuration(durations[0]);
  };

  const amount = selectedPlan ? priceMapValue[selectedPlan][selectedDuration] : 0;
  const displayPrice = selectedPlan
    ? priceMapDisplay[selectedPlan][selectedDuration]
    : 'Gi√° t·ª´ 50.000‚Ç´ ƒë·∫øn 1.000.000‚Ç´';

  const durationToDays = {
    '01 th√°ng': 30,
    '03 th√°ng': 90,
    '06 th√°ng': 180,
    '12 th√°ng': 365,
  };

  const handlePayment = async () => {
    if (!selectedPlan) return;

    if (!window.confirm('B·∫°n c√≥ mu·ªën thanh to√°n kh√¥ng?')) return;

    // ===== Th·ª±c hi·ªán mua tr·ª±c ti·∫øp tr√™n server, kh√¥ng d√πng localStorage =====
    try {
      if (selectedPlan === 'G√≥i ti·∫øt ki·ªám') {
        const planDays = durationToDays[selectedDuration] || 30;

        const res = await axios.post(
          `${API_BASE}/account50k/buy`,
          { planDays, amount },
          { headers: { 'Content-Type': 'application/json' } } // Kh√¥ng d√πng token
        );

        if (!res.data || res.data.success !== true) {
          throw new Error(res.data?.message || 'Mua th·∫•t b·∫°i');
        }

        const { order } = res.data.data;
        alert(
          `Thanh to√°n th√†nh c√¥ng!\nM√£ ƒë∆°n: ${order.orderCode}\nUsername: ${order.accountEmail}\nPassword: ${order.accountPassword}`
        );
        navigate('/my-orders');
        return;
      }

      // ===== Nh√°nh G√≥i cao c·∫•p =====
      const { data } = await axios.post(
        `${API_BASE}/orders`,
        { plan: selectedPlan, duration: selectedDuration, amount },
        { headers: { 'Content-Type': 'application/json' } } // Kh√¥ng d√πng token
      );

      if (data.netflixAccount) {
        const { email, password, profileName, pin } = data.netflixAccount;
        alert(
          `Thanh to√°n th√†nh c√¥ng!\nEmail: ${email}\nM·∫≠t kh·∫©u: ${password}\nT√™n h·ªì s∆°: ${profileName}\nM√£ PIN: ${pin}`
        );
      } else {
        alert('Thanh to√°n th√†nh c√¥ng!');
      }

      navigate('/my-orders');
    } catch (err) {
      console.error('L·ªói thanh to√°n:', err);
      const serverMsg = err?.response?.data?.message || err?.message;
      alert(`Thanh to√°n th·∫•t b·∫°i: ${serverMsg || 'L·ªói server'}`);
    }
  };

  return (
    <div className="plans-overview">
      <div className="bg-cover-bg" />
      <div className="bg-overlay" />

      <div className="content-wrapper">
        {/* LEFT PANEL */}
        <div className="left-panel">
          <div className="netflix-card">
            <img src="/images/netflix-icon.png" alt="Netflix" className="netflix-icon" />
            <button className="zoom-btn">
              <ArrowsPointingOutIcon className="zoom-icon" />
            </button>
          </div>

          <div className="stats">
            <div className="stat-item">
              <ChatBubbleLeftEllipsisIcon className="stat-icon" /> <span>525 ƒê√°nh gi√°</span>
            </div>
            <div className="stat-item">
              <ShoppingCartIcon className="stat-icon" /> <span>28586 ƒê√£ b√°n</span>
            </div>
            <div className="stat-item">
              <ShieldCheckIcon className="stat-icon" /> <span>B·∫£o h√†nh 24/7</span>
            </div>
            <div className="stat-item">
              <StarIcon className="stat-icon" /> <span>5.0</span>
            </div>
          </div>
        </div>

        {/* RIGHT PANEL */}
        <div className="right-panel mobile-card">
          <h1 className="title">Mua T√†i kho·∫£n Netflix Premium</h1>
          <p className="price">{displayPrice}</p>

          <div className="plan-selection">
            {plans.map((p) => (
              <button
                key={p}
                onClick={() => handlePlanChange(p)}
                className={`btn-plan ${selectedPlan === p ? 'active' : ''}`}
              >
                {p}
              </button>
            ))}
          </div>

          {selectedPlan && (
            <>
              <p className="description">{planDescriptions[selectedPlan]}</p>
              <div className="duration-selection">
                {durations.map((d) => (
                  <button
                    key={d}
                    onClick={() => setSelectedDuration(d)}
                    className={`btn-duration ${selectedDuration === d ? 'active' : ''}`}
                  >
                    {d}
                  </button>
                ))}
              </div>
            </>
          )}

          {selectedPlan && (
            <button className="btn-pay main-pay" onClick={handlePayment}>
              Thanh to√°n
            </button>
          )}
        </div>
      </div>

      {/* Sticky CTA (hi·ªán tr√™n mobile nh·ªù CSS) */}
      {selectedPlan && (
        <div className="sticky-cta">
          <div className="summary">
            <div>
              <strong>{selectedPlan}</strong> ‚Ä¢ {selectedDuration}
            </div>
            <div>{displayPrice}</div>
          </div>
          <button className="btn-pay" onClick={handlePayment}>
            Thanh to√°n
          </button>
        </div>
      )}
    </div>
  );
}
